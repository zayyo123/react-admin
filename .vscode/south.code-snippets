{
  "apiFn": {
    "prefix": "apifn",
    "description": "api代码片段",
    "body": [
      "setLoading(true);",
      "$1(params).then(res => {",
      "  const { code, data } = res;",
      "",
      "  if (Number(code) === 200) {",
      "",
      "  }",
      "}).finally(() => {",
      "  setLoading(false)",
      "});",
    ]
  },
  "loadHook": {
    "prefix": "loadhook",
    "description": "loading hook数据",
    "body": [
      "const [isLoading, setLoading] = useState(false);"
    ]
  },
  "fetchHook": {
    "prefix": "fetchhook",
    "description": "isFetch hook数据",
    "body": [
      "const [isFetch, setFetch] = useState(false);",
      "",
      "useEffect(() => {",
      "  if (isFetch) {",
      "    setFetch(false);",
      "    fetchData();",
      "  }",
      "}, [isFetch]);",
    ]
  },
  "pageHook": {
    "prefix": "pagehook",
    "description": "page hook数据",
    "body": [
      "const [page, setPage] = useState(1);",
      "const [pageSize, setPageSize] = useState(20);",
    ]
  },
  "demoPage": {
    "prefix": "demoPage",
    "description": "生成常用分页页面",
    "body": [
      "import type { BaseFormData } from '#/form';",
      "import type { PagePermission } from '#/public';",
      "import { type FormInstance, message } from 'antd';",
      "import { searchList, createList, tableColumns } from './model';",
      "import {",
      "  geXXXPage,",
      "  geXXXById,",
      "  createXXX,",
      "  updateXXX,",
      "  deleteXXX",
      "} from '@/servers/xxx';",
      "",
      "// 当前行数据",
      "interface RowData {",
      "  id: string;",
      "}",
      "",
      "// 初始化新增数据",
      "const initCreate = {",
      "  status: 1",
      "};",
      "",
      "function Page() {",
      "  const { t } = useTranslation();",
      "  const createFormRef = useRef<FormInstance>(null);",
      "  const columns = tableColumns(t, optionRender);",
      "  const [isFetch, setFetch] = useState(false);",
      "  const [isCreateOpen, setCreateOpen] = useState(false);",
      "  const [isLoading, setLoading] = useState(false);",
      "  const [isCreateLoading, setCreateLoading] = useState(false);",
      "  const [createTitle, setCreateTitle] = useState(ADD_TITLE(t));",
      "  const [createId, setCreateId] = useState('');",
      "  const [createData, setCreateData] = useState<BaseFormData>(initCreate);",
      "  const [searchData, setSearchData] = useState<BaseFormData>({});",
      "  const [page, setPage] = useState(INIT_PAGINATION.page);",
      "  const [pageSize, setPageSize] = useState(INIT_PAGINATION.pageSize);",
      "  const [total, setTotal] = useState(0);",
      "  const [tableData, setTableData] = useState<BaseFormData[]>([]);",
      "  const [messageApi, contextHolder] = message.useMessage();",
      "  const { permissions } = useCommonStore();",
      "",
      "  // 权限前缀",
      "  const permissionPrefix = '/xxx';",
      "",
      "  // 权限",
      "  const pagePermission: PagePermission = {",
      "    page: checkPermission(`${permissionPrefix}/index`, permissions),",
      "    create: checkPermission(`${permissionPrefix}/create`, permissions),",
      "    update: checkPermission(`${permissionPrefix}/update`, permissions),",
      "    delete: checkPermission(`${permissionPrefix}/delete`, permissions)",
      "  };",
      "",
      "  /** 获取表格数据 */",
      "  const getPage = useCallback(async () => {",
      "    const params = { ...searchData, page, pageSize };",
      "",
      "    try {",
      "      setLoading(true);",
      "      const res = await geXXXPage(params);",
      "      const { code, data } = res;",
      "      if (Number(code) !== 200) return;",
      "      const { items, total } = data;",
      "      setTotal(total || 0);",
      "      setTableData(items || []);",
      "    } finally {",
      "      setFetch(false);",
      "      setLoading(false);",
      "    }",
      "  }, [page, pageSize, searchData]);",
      "",
      "  useEffect(() => {",
      "    if (isFetch) getPage();",
      "  }, [getPage, isFetch]);",
      "",
      "  /**",
      "   * 点击搜索",
      "   * @param values - 表单返回数据",
      "   */",
      "  const onSearch = (values: BaseFormData) => {",
      "    setPage(1);",
      "    setSearchData(values);",
      "    setFetch(true);",
      "  };",
      "",
      "  // 首次进入自动加载接口数据",
      "  useEffect(() => {",
      "    if (pagePermission.page) getPage();",
      "    // TODO: 重复请求测试，可删",
      "    if (pagePermission.page) getPage();",
      "  // eslint-disable-next-line react-hooks/exhaustive-deps",
      "  }, [pagePermission.page]);",
      "",
      "  /** 点击新增 */",
      "  const onCreate = () => {",
      "    setCreateOpen(true);",
      "    setCreateTitle(ADD_TITLE(t));",
      "    setCreateId('');",
      "    setCreateData(initCreate);",
      "  };",
      "",
      "  /**",
      "   * 点击编辑",
      "   * @param id - 唯一值",
      "   */",
      "  const onUpdate = async (id: string) => {",
      "    try {",
      "      setCreateOpen(true);",
      "      setCreateTitle(EDIT_TITLE(t, id));",
      "      setCreateId(id);",
      "      setCreateLoading(true);",
      "      const { code, data } = await geXXXById(id);",
      "      if (Number(code) !== 200) return;",
      "      setCreateData(data);",
      "    } finally {",
      "      setCreateLoading(false);",
      "    }",
      "  };",
      "",
      "  /** 表单提交 */",
      "  const createSubmit = () => {",
      "    createFormRef?.current?.submit();",
      "  };",
      "",
      "  /** 关闭新增/修改弹窗 */",
      "  const closeCreate = () => {",
      "    setCreateOpen(false);",
      "  };",
      "",
      "  /**",
      "   * 新增/编辑提交",
      "   * @param values - 表单返回数据",
      "   */",
      "  const handleCreate = async (values: BaseFormData) => {",
      "    try {",
      "      setCreateLoading(true);",
      "      const functions = () => createId ? updateXXX(createId, values) : createXXX(values);",
      "      const { code, message } = await functions();",
      "      if (Number(code) !== 200) return;",
      "      messageApi.success(message || t('public.successfulOperation'));",
      "      setCreateOpen(false);",
      "      getPage();",
      "    } finally {",
      "      setCreateLoading(false);",
      "    }",
      "  };",
      "",
      "  /**",
      "   * 点击删除",
      "   * @param id - 唯一值",
      "   */",
      "  const onDelete = async (id: string) => {",
      "    try {",
      "      setLoading(true);",
      "      const { code, message } = await deleteXXX(id);",
      "      if (Number(code) === 200) {",
      "        messageApi.success(message || t('public.successfullyDeleted'));",
      "        getPage();",
      "      }",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  /**",
      "   * 处理分页",
      "   * @param page - 当前页数",
      "   * @param pageSize - 每页条数",
      "   */",
      "  const onChangePagination = useCallback((page: number, pageSize: number) => {",
      "    setPage(page);",
      "    setPageSize(pageSize);",
      "    setFetch(true);",
      "  }, []);",
      "",
      "  /**",
      "   * 渲染操作",
      "   * @param _ - 当前值",
      "   * @param record - 当前行参数",
      "   */",
      "  function optionRender(_: unknown, record: object) {",
      "    return <>",
      "      {",
      "        pagePermission.update === true &&",
      "        <UpdateBtn",
      "          className='mr-5px'",
      "          onClick={() => onUpdate((record as RowData).id)}",
      "        />",
      "      }",
      "      {",
      "        pagePermission.delete === true &&",
      "        <DeleteBtn",
      "          className='mr-5px'",
      "          handleDelete={() => onDelete((record as RowData).id)}",
      "        />",
      "      }",
      "    </>;",
      "  }",
      "",
      "  return (",
      "    <BaseContent isPermission={pagePermission.page}>",
      "      { contextHolder }",
      "      <BaseCard>",
      "        <BaseSearch",
      "          list={searchList(t)}",
      "          data={searchData}",
      "          isLoading={isLoading}",
      "          handleFinish={onSearch}",
      "        />",
      "      </BaseCard>",
      "",
      "      <BaseCard className='mt-10px'>",
      "        <BaseTable",
      "          isLoading={isLoading}",
      "          isCreate={pagePermission.create}",
      "          columns={columns}",
      "          dataSource={tableData}",
      "          getPage={getPage}",
      "          onCreate={onCreate}",
      "        />",
      "",
      "        <BasePagination",
      "          disabled={isLoading}",
      "          current={page}",
      "          pageSize={pageSize}",
      "          total={total}",
      "          onChange={onChangePagination}",
      "        />",
      "      </BaseCard>",
      "",
      "      <BaseModal",
      "        width={600}",
      "        title={createTitle}",
      "        open={isCreateOpen}",
      "        confirmLoading={isCreateLoading}",
      "        onOk={createSubmit}",
      "        onCancel={closeCreate}",
      "      >",
      "        <BaseForm",
      "          ref={createFormRef}",
      "          list={createList(t, createId)}",
      "          data={createData}",
      "          labelCol={{ span: 4 }}",
      "          wrapperCol={{ span: 19 }}",
      "          handleFinish={handleCreate}",
      "        />",
      "      </BaseModal>",
      "    </BaseContent>",
      "  );",
      "}",
      "",
      "export default Page;",
      "",
    ]
  },
  "demoModel": {
    "prefix": "demoModel",
    "description": "生成常用model页面",
    "body": [
      "import type { TFunction } from 'i18next';",
      "",
      "// 搜索数据",
      "export const searchList = (t: TFunction): BaseSearchList[] => [",
      "  {",
      "    title: t('public.name'),",
      "    name: 'name',",
      "    wrapperWidth: 100,",
      "    component: 'Input',",
      "  },",
      "];",
      "",
      "/**",
      " * 表格数据",
      " * @param optionRender - 渲染操作函数",
      " */",
      "export const tableColumns = (t: TFunction, optionRender: TableOptions<object>): TableColumn[] => {",
      "  return [",
      "    {",
      "      title: 'ID',",
      "      dataIndex: 'id',",
      "      width: 200",
      "    },",
      "    {",
      "      title: t('public.name'),",
      "      dataIndex: 'name',",
      "      width: 200",
      "    },",
      "    {",
      "      title: t('public.creationTime'),",
      "      dataIndex: 'created_at',",
      "      width: 200",
      "    },",
      "    {",
      "      title: t('public.updateTime'),",
      "      dataIndex: 'updated_at',",
      "      width: 200",
      "    },",
      "    {",
      "      title: t('public.operate'),",
      "      dataIndex: 'operate',",
      "      width: 200,",
      "      fixed: 'right',",
      "      render: (value: unknown, record: object) => optionRender(value, record)",
      "    },",
      "  ];",
      "};",
      "",
      "// 新增数据",
      "export const createList = (t: TFunction, id: string): BaseFormList[] => [",
      "  {",
      "    label: t('public.name'),",
      "    name: 'name',",
      "    rules: FORM_REQUIRED,",
      "    component: 'Input'",
      "  },",
      "];",
      "",
    ],
  },
  "demoApi": {
    "prefix": "demoApi",
    "description": "生成常用api页面",
    "body": [
      "import { request } from '@/utils/request';",
      "",
      "enum API {",
      "  URL = '/xxx'",
      "}",
      "",
      "/**",
      " * 获取分页数据",
      " * @param data - 请求数据",
      " */",
      "export function getXXXPage(data: Partial<BaseFormData> & PaginationData) {",
      "  return request.get<PageServerResult<BaseFormData[]>>(",
      "    `${API.URL}/page`,",
      "    { params: data }",
      "  );",
      "}",
      "",
      "/**",
      " * 根据ID获取数据",
      " * @param id - ID",
      " */",
      "export function getXXXById(id: string) {",
      "  return request.get<BaseFormData>(`${API.URL}/detail?id=${id}`);",
      "}",
      "",
      "/**",
      " * 新增数据",
      " * @param data - 请求数据",
      " */",
      "export function createXXX(data: BaseFormData) {",
      "  return request.post(API.URL, data);",
      "}",
      "",
      "/**",
      " * 修改数据",
      " * @param id - 修改id值",
      " * @param data - 请求数据",
      " */",
      "export function updateXXX(id: string, data: BaseFormData) {",
      "  return request.put(`${API.URL}/${id}`, data);",
      "}",
      "",
      "/**",
      " * 删除",
      " * @param id - 删除id值",
      " */",
      "export function deleteXXX(id: string) {",
      "  return request.delete(`${API.URL}/${id}`);",
      "}",
      "",
      "/**",
      " * 批量删除",
      " * @param data - 请求数据",
      " */",
      "export function batchDeleteXXX(data: BaseFormData) {",
      "  return request.post(`${API.URL}/batchDelete`, data);",
      "}",
      "",
    ],
  },
}
